#local encrypt
import marshal,zlib,base64
exec(marshal.loads(zlib.decompress(base64.b16decode("
